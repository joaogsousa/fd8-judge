// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/server.go

// Package http is a generated GoMock package.
package http

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockserverRuntime is a mock of serverRuntime interface
type MockserverRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockserverRuntimeMockRecorder
}

// MockserverRuntimeMockRecorder is the mock recorder for MockserverRuntime
type MockserverRuntimeMockRecorder struct {
	mock *MockserverRuntime
}

// NewMockserverRuntime creates a new mock instance
func NewMockserverRuntime(ctrl *gomock.Controller) *MockserverRuntime {
	mock := &MockserverRuntime{ctrl: ctrl}
	mock.recorder = &MockserverRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockserverRuntime) EXPECT() *MockserverRuntimeMockRecorder {
	return m.recorder
}

// Intn mocks base method
func (m *MockserverRuntime) Intn(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intn", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// Intn indicates an expected call of Intn
func (mr *MockserverRuntimeMockRecorder) Intn(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intn", reflect.TypeOf((*MockserverRuntime)(nil).Intn), n)
}

// Listen mocks base method
func (m *MockserverRuntime) Listen(network, address string) (net.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", network, address)
	ret0, _ := ret[0].(net.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen
func (mr *MockserverRuntimeMockRecorder) Listen(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockserverRuntime)(nil).Listen), network, address)
}

// Serve mocks base method
func (m *MockserverRuntime) Serve(serve func(net.Listener) error, l net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", serve, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve
func (mr *MockserverRuntimeMockRecorder) Serve(serve, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockserverRuntime)(nil).Serve), serve, l)
}
