// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/file/file.go

// Package file is a generated GoMock package.
package file

import (
	tar "archive/tar"
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	os "os"
	filepath "path/filepath"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method
func (m *MockService) DownloadFile(relativePath, url string, headers http.Header) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", relativePath, url, headers)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile
func (mr *MockServiceMockRecorder) DownloadFile(relativePath, url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockService)(nil).DownloadFile), relativePath, url, headers)
}

// UploadFile mocks base method
func (m *MockService) UploadFile(relativePath, authorizedServerURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", relativePath, authorizedServerURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockServiceMockRecorder) UploadFile(relativePath, authorizedServerURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockService)(nil).UploadFile), relativePath, authorizedServerURL)
}

// Compress mocks base method
func (m *MockService) Compress(inputRelativePath, outputRelativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compress", inputRelativePath, outputRelativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compress indicates an expected call of Compress
func (mr *MockServiceMockRecorder) Compress(inputRelativePath, outputRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compress", reflect.TypeOf((*MockService)(nil).Compress), inputRelativePath, outputRelativePath)
}

// Uncompress mocks base method
func (m *MockService) Uncompress(inputRelativePath, outputRelativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uncompress", inputRelativePath, outputRelativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uncompress indicates an expected call of Uncompress
func (mr *MockServiceMockRecorder) Uncompress(inputRelativePath, outputRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uncompress", reflect.TypeOf((*MockService)(nil).Uncompress), inputRelativePath, outputRelativePath)
}

// RemoveFileTree mocks base method
func (m *MockService) RemoveFileTree(relativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFileTree", relativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFileTree indicates an expected call of RemoveFileTree
func (mr *MockServiceMockRecorder) RemoveFileTree(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFileTree", reflect.TypeOf((*MockService)(nil).RemoveFileTree), relativePath)
}

// OpenFile mocks base method
func (m *MockService) OpenFile(relativePath string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", relativePath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockServiceMockRecorder) OpenFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockService)(nil).OpenFile), relativePath)
}

// CreateFile mocks base method
func (m *MockService) CreateFile(relativePath string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", relativePath)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockServiceMockRecorder) CreateFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockService)(nil).CreateFile), relativePath)
}

// ListFiles mocks base method
func (m *MockService) ListFiles(relativePath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", relativePath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles
func (mr *MockServiceMockRecorder) ListFiles(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockService)(nil).ListFiles), relativePath)
}

// MoveFileTree mocks base method
func (m *MockService) MoveFileTree(oldRelativePath, newRelativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFileTree", oldRelativePath, newRelativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFileTree indicates an expected call of MoveFileTree
func (mr *MockServiceMockRecorder) MoveFileTree(oldRelativePath, newRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFileTree", reflect.TypeOf((*MockService)(nil).MoveFileTree), oldRelativePath, newRelativePath)
}

// MockdefaultFileServiceRuntime is a mock of defaultFileServiceRuntime interface
type MockdefaultFileServiceRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultFileServiceRuntimeMockRecorder
}

// MockdefaultFileServiceRuntimeMockRecorder is the mock recorder for MockdefaultFileServiceRuntime
type MockdefaultFileServiceRuntimeMockRecorder struct {
	mock *MockdefaultFileServiceRuntime
}

// NewMockdefaultFileServiceRuntime creates a new mock instance
func NewMockdefaultFileServiceRuntime(ctrl *gomock.Controller) *MockdefaultFileServiceRuntime {
	mock := &MockdefaultFileServiceRuntime{ctrl: ctrl}
	mock.recorder = &MockdefaultFileServiceRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdefaultFileServiceRuntime) EXPECT() *MockdefaultFileServiceRuntimeMockRecorder {
	return m.recorder
}

// NewRequest mocks base method
func (m *MockdefaultFileServiceRuntime) NewRequest(method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest
func (mr *MockdefaultFileServiceRuntimeMockRecorder) NewRequest(method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).NewRequest), method, url, body)
}

// Do mocks base method
func (m *MockdefaultFileServiceRuntime) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Do), req)
}

// Create mocks base method
func (m *MockdefaultFileServiceRuntime) Create(name string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Create), name)
}

// Copy mocks base method
func (m *MockdefaultFileServiceRuntime) Copy(dst io.Writer, src io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", dst, src)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Copy(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Copy), dst, src)
}

// NewDecoderDecode mocks base method
func (m *MockdefaultFileServiceRuntime) NewDecoderDecode(r io.Reader, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDecoderDecode", r, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewDecoderDecode indicates an expected call of NewDecoderDecode
func (mr *MockdefaultFileServiceRuntimeMockRecorder) NewDecoderDecode(r, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDecoderDecode", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).NewDecoderDecode), r, v)
}

// Open mocks base method
func (m *MockdefaultFileServiceRuntime) Open(name string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Open), name)
}

// RemoveAll mocks base method
func (m *MockdefaultFileServiceRuntime) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockdefaultFileServiceRuntimeMockRecorder) RemoveAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).RemoveAll), path)
}

// Walk mocks base method
func (m *MockdefaultFileServiceRuntime) Walk(root string, walkFn filepath.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", root, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Walk(root, walkFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Walk), root, walkFn)
}

// FileInfoHeader mocks base method
func (m *MockdefaultFileServiceRuntime) FileInfoHeader(fi os.FileInfo, link string) (*tar.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileInfoHeader", fi, link)
	ret0, _ := ret[0].(*tar.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileInfoHeader indicates an expected call of FileInfoHeader
func (mr *MockdefaultFileServiceRuntimeMockRecorder) FileInfoHeader(fi, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileInfoHeader", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).FileInfoHeader), fi, link)
}

// WriteHeader mocks base method
func (m *MockdefaultFileServiceRuntime) WriteHeader(out *tar.Writer, hdr *tar.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeader", out, hdr)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockdefaultFileServiceRuntimeMockRecorder) WriteHeader(out, hdr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).WriteHeader), out, hdr)
}

// NewReader mocks base method
func (m *MockdefaultFileServiceRuntime) NewReader(r io.Reader) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", r)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader
func (mr *MockdefaultFileServiceRuntimeMockRecorder) NewReader(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).NewReader), r)
}

// Next mocks base method
func (m *MockdefaultFileServiceRuntime) Next(in *tar.Reader) (*tar.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", in)
	ret0, _ := ret[0].(*tar.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Next(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Next), in)
}

// MkdirAll mocks base method
func (m *MockdefaultFileServiceRuntime) MkdirAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockdefaultFileServiceRuntimeMockRecorder) MkdirAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).MkdirAll), path)
}

// ReadDir mocks base method
func (m *MockdefaultFileServiceRuntime) ReadDir(dirname string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirname)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir
func (mr *MockdefaultFileServiceRuntimeMockRecorder) ReadDir(dirname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).ReadDir), dirname)
}

// Stat mocks base method
func (m *MockdefaultFileServiceRuntime) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Stat), name)
}

// Rename mocks base method
func (m *MockdefaultFileServiceRuntime) Rename(oldpath, newpath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", oldpath, newpath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (mr *MockdefaultFileServiceRuntimeMockRecorder) Rename(oldpath, newpath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockdefaultFileServiceRuntime)(nil).Rename), oldpath, newpath)
}
