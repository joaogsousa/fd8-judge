// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cage/cage.go

// Package cage is a generated GoMock package.
package cage

import (
	gomock "github.com/golang/mock/gomock"
	unix "golang.org/x/sys/unix"
	exec "os/exec"
	reflect "reflect"
)

// MockCage is a mock of Cage interface
type MockCage struct {
	ctrl     *gomock.Controller
	recorder *MockCageMockRecorder
}

// MockCageMockRecorder is the mock recorder for MockCage
type MockCageMockRecorder struct {
	mock *MockCage
}

// NewMockCage creates a new mock instance
func NewMockCage(ctrl *gomock.Controller) *MockCage {
	mock := &MockCage{ctrl: ctrl}
	mock.recorder = &MockCageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCage) EXPECT() *MockCageMockRecorder {
	return m.recorder
}

// Encage mocks base method
func (m *MockCage) Encage(monster *exec.Cmd) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encage", monster)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encage indicates an expected call of Encage
func (mr *MockCageMockRecorder) Encage(monster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encage", reflect.TypeOf((*MockCage)(nil).Encage), monster)
}

// Execute mocks base method
func (m *MockCage) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockCageMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCage)(nil).Execute))
}

// MockdefaultCageRuntime is a mock of defaultCageRuntime interface
type MockdefaultCageRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultCageRuntimeMockRecorder
}

// MockdefaultCageRuntimeMockRecorder is the mock recorder for MockdefaultCageRuntime
type MockdefaultCageRuntimeMockRecorder struct {
	mock *MockdefaultCageRuntime
}

// NewMockdefaultCageRuntime creates a new mock instance
func NewMockdefaultCageRuntime(ctrl *gomock.Controller) *MockdefaultCageRuntime {
	mock := &MockdefaultCageRuntime{ctrl: ctrl}
	mock.recorder = &MockdefaultCageRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdefaultCageRuntime) EXPECT() *MockdefaultCageRuntimeMockRecorder {
	return m.recorder
}

// LookPath mocks base method
func (m *MockdefaultCageRuntime) LookPath(file string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookPath", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookPath indicates an expected call of LookPath
func (mr *MockdefaultCageRuntimeMockRecorder) LookPath(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookPath", reflect.TypeOf((*MockdefaultCageRuntime)(nil).LookPath), file)
}

// Exec mocks base method
func (m *MockdefaultCageRuntime) Exec(argv0 string, argv, envv []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", argv0, argv, envv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockdefaultCageRuntimeMockRecorder) Exec(argv0, argv, envv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockdefaultCageRuntime)(nil).Exec), argv0, argv, envv)
}

// Setrlimit mocks base method
func (m *MockdefaultCageRuntime) Setrlimit(which int, lim *unix.Rlimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setrlimit", which, lim)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setrlimit indicates an expected call of Setrlimit
func (mr *MockdefaultCageRuntimeMockRecorder) Setrlimit(which, lim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setrlimit", reflect.TypeOf((*MockdefaultCageRuntime)(nil).Setrlimit), which, lim)
}
