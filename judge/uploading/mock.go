// Code generated by MockGen. DO NOT EDIT.
// Source: judge/uploading/interface.go

// Package uploading is a generated GoMock package.
package uploading

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockFileUploaderDependencies is a mock of FileUploaderDependencies interface
type MockFileUploaderDependencies struct {
	ctrl     *gomock.Controller
	recorder *MockFileUploaderDependenciesMockRecorder
}

// MockFileUploaderDependenciesMockRecorder is the mock recorder for MockFileUploaderDependencies
type MockFileUploaderDependenciesMockRecorder struct {
	mock *MockFileUploaderDependencies
}

// NewMockFileUploaderDependencies creates a new mock instance
func NewMockFileUploaderDependencies(ctrl *gomock.Controller) *MockFileUploaderDependencies {
	mock := &MockFileUploaderDependencies{ctrl: ctrl}
	mock.recorder = &MockFileUploaderDependenciesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileUploaderDependencies) EXPECT() *MockFileUploaderDependenciesMockRecorder {
	return m.recorder
}

// DoGetRequest mocks base method
func (m *MockFileUploaderDependencies) DoGetRequest(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetRequest", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetRequest indicates an expected call of DoGetRequest
func (mr *MockFileUploaderDependenciesMockRecorder) DoGetRequest(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetRequest", reflect.TypeOf((*MockFileUploaderDependencies)(nil).DoGetRequest), url)
}

// DecodeUploadInfo mocks base method
func (m *MockFileUploaderDependencies) DecodeUploadInfo(body io.Reader) (*UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeUploadInfo", body)
	ret0, _ := ret[0].(*UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeUploadInfo indicates an expected call of DecodeUploadInfo
func (mr *MockFileUploaderDependenciesMockRecorder) DecodeUploadInfo(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeUploadInfo", reflect.TypeOf((*MockFileUploaderDependencies)(nil).DecodeUploadInfo), body)
}

// OpenFile mocks base method
func (m *MockFileUploaderDependencies) OpenFile(relativePath string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", relativePath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockFileUploaderDependenciesMockRecorder) OpenFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileUploaderDependencies)(nil).OpenFile), relativePath)
}

// NewHTTPRequest mocks base method
func (m *MockFileUploaderDependencies) NewHTTPRequest(method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHTTPRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHTTPRequest indicates an expected call of NewHTTPRequest
func (mr *MockFileUploaderDependenciesMockRecorder) NewHTTPRequest(method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHTTPRequest", reflect.TypeOf((*MockFileUploaderDependencies)(nil).NewHTTPRequest), method, url, body)
}

// DoRequest mocks base method
func (m *MockFileUploaderDependencies) DoRequest(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequest", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRequest indicates an expected call of DoRequest
func (mr *MockFileUploaderDependenciesMockRecorder) DoRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockFileUploaderDependencies)(nil).DoRequest), req)
}
