// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/file.go

// Package services is a generated GoMock package.
package services

import (
	tar "archive/tar"
	gomock "github.com/golang/mock/gomock"
	services "github.com/matheuscscp/fd8-judge/pkg/services"
	io "io"
	http "net/http"
	os "os"
	filepath "path/filepath"
	reflect "reflect"
)

// MockFileService is a mock of FileService interface
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method
func (m *MockFileService) DownloadFile(relativePath, url string, headers http.Header) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", relativePath, url, headers)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile
func (mr *MockFileServiceMockRecorder) DownloadFile(relativePath, url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileService)(nil).DownloadFile), relativePath, url, headers)
}

// RequestUploadInfo mocks base method
func (m *MockFileService) RequestUploadInfo(authorizedServerURL string, fileSize int) (*services.FileUploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestUploadInfo", authorizedServerURL, fileSize)
	ret0, _ := ret[0].(*services.FileUploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestUploadInfo indicates an expected call of RequestUploadInfo
func (mr *MockFileServiceMockRecorder) RequestUploadInfo(authorizedServerURL, fileSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestUploadInfo", reflect.TypeOf((*MockFileService)(nil).RequestUploadInfo), authorizedServerURL, fileSize)
}

// UploadFile mocks base method
func (m *MockFileService) UploadFile(relativePath string, uploadInfo *services.FileUploadInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", relativePath, uploadInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockFileServiceMockRecorder) UploadFile(relativePath, uploadInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), relativePath, uploadInfo)
}

// Compress mocks base method
func (m *MockFileService) Compress(inputRelativePath, outputRelativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compress", inputRelativePath, outputRelativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compress indicates an expected call of Compress
func (mr *MockFileServiceMockRecorder) Compress(inputRelativePath, outputRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compress", reflect.TypeOf((*MockFileService)(nil).Compress), inputRelativePath, outputRelativePath)
}

// Uncompress mocks base method
func (m *MockFileService) Uncompress(inputRelativePath, outputRelativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uncompress", inputRelativePath, outputRelativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uncompress indicates an expected call of Uncompress
func (mr *MockFileServiceMockRecorder) Uncompress(inputRelativePath, outputRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uncompress", reflect.TypeOf((*MockFileService)(nil).Uncompress), inputRelativePath, outputRelativePath)
}

// MockFileServiceRuntime is a mock of FileServiceRuntime interface
type MockFileServiceRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceRuntimeMockRecorder
}

// MockFileServiceRuntimeMockRecorder is the mock recorder for MockFileServiceRuntime
type MockFileServiceRuntimeMockRecorder struct {
	mock *MockFileServiceRuntime
}

// NewMockFileServiceRuntime creates a new mock instance
func NewMockFileServiceRuntime(ctrl *gomock.Controller) *MockFileServiceRuntime {
	mock := &MockFileServiceRuntime{ctrl: ctrl}
	mock.recorder = &MockFileServiceRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileServiceRuntime) EXPECT() *MockFileServiceRuntimeMockRecorder {
	return m.recorder
}

// NewHTTPRequest mocks base method
func (m *MockFileServiceRuntime) NewHTTPRequest(method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHTTPRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHTTPRequest indicates an expected call of NewHTTPRequest
func (mr *MockFileServiceRuntimeMockRecorder) NewHTTPRequest(method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHTTPRequest", reflect.TypeOf((*MockFileServiceRuntime)(nil).NewHTTPRequest), method, url, body)
}

// DoRequest mocks base method
func (m *MockFileServiceRuntime) DoRequest(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequest", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRequest indicates an expected call of DoRequest
func (mr *MockFileServiceRuntimeMockRecorder) DoRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockFileServiceRuntime)(nil).DoRequest), req)
}

// CreateFile mocks base method
func (m *MockFileServiceRuntime) CreateFile(relativePath string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", relativePath)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockFileServiceRuntimeMockRecorder) CreateFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileServiceRuntime)(nil).CreateFile), relativePath)
}

// Copy mocks base method
func (m *MockFileServiceRuntime) Copy(dst io.Writer, src io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", dst, src)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy
func (mr *MockFileServiceRuntimeMockRecorder) Copy(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFileServiceRuntime)(nil).Copy), dst, src)
}

// DoGetRequest mocks base method
func (m *MockFileServiceRuntime) DoGetRequest(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGetRequest", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGetRequest indicates an expected call of DoGetRequest
func (mr *MockFileServiceRuntimeMockRecorder) DoGetRequest(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGetRequest", reflect.TypeOf((*MockFileServiceRuntime)(nil).DoGetRequest), url)
}

// DecodeUploadInfo mocks base method
func (m *MockFileServiceRuntime) DecodeUploadInfo(body io.Reader) (*services.FileUploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeUploadInfo", body)
	ret0, _ := ret[0].(*services.FileUploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeUploadInfo indicates an expected call of DecodeUploadInfo
func (mr *MockFileServiceRuntimeMockRecorder) DecodeUploadInfo(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeUploadInfo", reflect.TypeOf((*MockFileServiceRuntime)(nil).DecodeUploadInfo), body)
}

// OpenFile mocks base method
func (m *MockFileServiceRuntime) OpenFile(relativePath string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", relativePath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockFileServiceRuntimeMockRecorder) OpenFile(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileServiceRuntime)(nil).OpenFile), relativePath)
}

// RemoveFileTree mocks base method
func (m *MockFileServiceRuntime) RemoveFileTree(relativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFileTree", relativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFileTree indicates an expected call of RemoveFileTree
func (mr *MockFileServiceRuntimeMockRecorder) RemoveFileTree(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFileTree", reflect.TypeOf((*MockFileServiceRuntime)(nil).RemoveFileTree), relativePath)
}

// WalkRelativePath mocks base method
func (m *MockFileServiceRuntime) WalkRelativePath(relativePath string, walkFunc filepath.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkRelativePath", relativePath, walkFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkRelativePath indicates an expected call of WalkRelativePath
func (mr *MockFileServiceRuntimeMockRecorder) WalkRelativePath(relativePath, walkFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkRelativePath", reflect.TypeOf((*MockFileServiceRuntime)(nil).WalkRelativePath), relativePath, walkFunc)
}

// CreateCompressionHeader mocks base method
func (m *MockFileServiceRuntime) CreateCompressionHeader(info os.FileInfo, path string) (*tar.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompressionHeader", info, path)
	ret0, _ := ret[0].(*tar.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompressionHeader indicates an expected call of CreateCompressionHeader
func (mr *MockFileServiceRuntimeMockRecorder) CreateCompressionHeader(info, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompressionHeader", reflect.TypeOf((*MockFileServiceRuntime)(nil).CreateCompressionHeader), info, path)
}

// WriteCompressionHeader mocks base method
func (m *MockFileServiceRuntime) WriteCompressionHeader(out *tar.Writer, header *tar.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCompressionHeader", out, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCompressionHeader indicates an expected call of WriteCompressionHeader
func (mr *MockFileServiceRuntimeMockRecorder) WriteCompressionHeader(out, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCompressionHeader", reflect.TypeOf((*MockFileServiceRuntime)(nil).WriteCompressionHeader), out, header)
}

// CreateCompressionReader mocks base method
func (m *MockFileServiceRuntime) CreateCompressionReader(in io.Reader) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompressionReader", in)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompressionReader indicates an expected call of CreateCompressionReader
func (mr *MockFileServiceRuntimeMockRecorder) CreateCompressionReader(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompressionReader", reflect.TypeOf((*MockFileServiceRuntime)(nil).CreateCompressionReader), in)
}

// ReadCompressionHeader mocks base method
func (m *MockFileServiceRuntime) ReadCompressionHeader(in *tar.Reader) (*tar.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCompressionHeader", in)
	ret0, _ := ret[0].(*tar.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCompressionHeader indicates an expected call of ReadCompressionHeader
func (mr *MockFileServiceRuntimeMockRecorder) ReadCompressionHeader(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCompressionHeader", reflect.TypeOf((*MockFileServiceRuntime)(nil).ReadCompressionHeader), in)
}

// CreateFolder mocks base method
func (m *MockFileServiceRuntime) CreateFolder(relativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", relativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockFileServiceRuntimeMockRecorder) CreateFolder(relativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockFileServiceRuntime)(nil).CreateFolder), relativePath)
}
